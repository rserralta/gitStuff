

Discussion Forum 10
1. Compile the following program using the command "gcc -o bank main.c -pthread -w":

#include<stdio.h>
#include<pthread.h>
pthread_mutex_t mutex;
balance = 10000; 
void* deposit(void* arg){
    for(int i = 0; i < 100;i++)
        balance += (int)arg;
}
void* withdraw(void* arg){
    for(int i = 0; i < 100;i++)
        balance -= (int)arg;
}
int main(int argc, char** argv){
    int thread_no = 1;//default # of deposit/withdraw threads
    //you can update this number by passing 
    //an integer as a command-line argument
    if(argc > 1)
        sscanf(strdup(argv[1]), "%d", &thread_no);
    fprintf(stderr,  "# of deposit threads: %d\n", thread_no); 
    fprintf(stderr,  "# of withdraw threads: %d\n", thread_no); 
    pthread_mutex_init(&mutex, NULL);
    pthread_t deposit_thread_id[thread_no];
    pthread_t withdraw_thread_id[thread_no];
    for(int i = 0;i  < thread_no;i++){
        while(pthread_create(&deposit_thread_id[i], NULL, deposit, (void*)100))//create a thread to deposit $100 100 times
            ;
        while(pthread_create(&withdraw_thread_id[i], NULL, withdraw, (void*)100))//create a thread to withdraw $100 100 times
            ;
    }
            
    for(int i = 0;i  < thread_no;i++){
        pthread_join(deposit_thread_id[i], NULL);
        pthread_join(withdraw_thread_id[i], NULL);
    }
    pthread_mutex_destroy(&mutex);
    printf("final balance: %d.\n", balance);
}
2. Run the program 5 times with each of the following commands and store the final balance output after each run:

./bank
./bank 100
./bank 1000
./bank 10000
3. Given the 20 final balance amounts that you generated in step 2, how many of them are corrupted due to race condition? (correct final balance should be 10000)

4. Use the declared "pthread_mutex_t mutex" to solve data corruption issue (lock the mutex before accessing balance and unlock it afterwards).
Discussion Forum 11
The program stored in shuffle.c receives the name of a file as its only command-line argument and shuffles the file content randomly using low-level I/O operations. It uses the following Unix system calls "open", "close", "lseek", "read", and "write".

1. Run the program multiple times to shuffle the file greetings.txt. and observe the result using "cat greetings.txt".

2. Change the program so that it reverses the content of the file whose name is given by the command-line argument.

3. Compare your answer with that of your classmates.

Discussion Forum 12
First watch the following short video and do the following:

1. Run the shell program, the following command-line arguments: "./shell /bin/cat shell.h"

2. Take a snapshot of the output and upload it on Canvas. Explain the output considering the fact that "cat" program concatenate files to the standard output stream.